import requests
from bs4 import BeautifulSoup
import pandas as pd
import os
import time

def scrape_stock_history_to_csv(stock_code_yf, start_date, end_date, folder_name="company_data"):
    """
    Scrapes historical stock price data from Yahoo Finance and saves it to a CSV file.

    Args:
        stock_code_yf (str): The Yahoo Finance ticker symbol (e.g., "A17U.SI").
        start_date (str): The start date for the historical data (YYYY-MM-DD).
        end_date (str): The end date for the historical data (YYYY-MM-DD).
        folder_name (str, optional): The name of the folder to save the CSV. Defaults to "company_data".
    """
    period1 = int(pd.Timestamp(start_date).timestamp())
    period2 = int(pd.Timestamp(end_date).timestamp())
    url = f"https://sg.finance.yahoo.com/quote/{stock_code_yf}/history?period1={period1}&period2={period2}"

    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
        "Accept-Language": "en-US,en;q=0.9",
    }

    try:
        print(f"Fetching data for {stock_code_yf}...")
        response = requests.get(url, headers=headers)
        response.raise_for_status()

        soup = BeautifulSoup(response.text, 'html.parser')
        tables = soup.find_all('table')

        target_table = None
        for table in tables:
            thead = table.find('thead')
            if thead:
                headers_row = [th.text.strip().split(' ')[0] for th in thead.find_all('th')]
                expected_headers = ['Date', 'Open', 'High', 'Low', 'Close', 'Adj', 'Volume']
                if all(header in headers_row for header in expected_headers[:5]):
                    target_table = table
                    break

        if target_table:
            column_headers = [th.text.strip().split(' ')[0] for th in target_table.thead.find_all('th')]
            data = []
            tbody = target_table.tbody
            if tbody:
                rows = tbody.find_all('tr')
                for row in rows:
                    cols = row.find_all('td')
                    row_data = [col.text.strip() for col in cols]
                    if row_data:
                        data.append(row_data)

            df = pd.DataFrame(data, columns=column_headers)

            os.makedirs(folder_name, exist_ok=True)
            csv_filename = os.path.join(folder_name, f"{stock_code_yf}_stock_price_history_non_adj.csv")
            df.to_csv(csv_filename, index=False)
            print(f"Historical data for {stock_code_yf} saved to {csv_filename}")
            return True

        else:
            print(f"Historical data table not found for {stock_code_yf}.")
            return False

    except requests.exceptions.RequestException as e:
        print(f"Error fetching data for {stock_code_yf}: {e}")
        return False
    except Exception as e:
        print(f"An error occurred while processing {stock_code_yf}: {e}")
        return False

if __name__ == '__main__':
    data_extracted = [
        {"Name": "AIMS APAC REIT", "Stock Code": "O5RU", "Property Sub-segment": "Industrial", "Market Cap (S$Mil)": 1014},
        {"Name": "ARA US Hospitality Trust", "Stock Code": "XZL", "Property Sub-segment": "Hospitality", "Market Cap (S$Mil)": 220},
        {"Name": "BHG Retail REIT", "Stock Code": "BMGU", "Property Sub-segment": "Retail", "Market Cap (S$Mil)": 255},
        {"Name": "CapitaLand Ascendas REIT", "Stock Code": "A17U", "Property Sub-segment": "Industrial", "Market Cap (S$Mil)": 11256},
        {"Name": "CapitaLand Ascott Trust", "Stock Code": "HMN", "Property Sub-segment": "Hospitality", "Market Cap (S$Mil)": 3313},
        {"Name": "CapitaLand China Trust", "Stock Code": "AU8U", "Property Sub-segment": "Diversified", "Market Cap (S$Mil)": 1142},
        {"Name": "CapitaLand India Trust", "Stock Code": "CY6U", "Property Sub-segment": "Diversified", "Market Cap (S$Mil)": 1313},
        {"Name": "CapitaLand Integrated Commercial Trust", "Stock Code": "C38U", "Property Sub-segment": "Diversified", "Market Cap (S$Mil)": 13334},
        {"Name": "CDL Hospitality Trusts", "Stock Code": "J85", "Property Sub-segment": "Hospitality", "Market Cap (S$Mil)": 1191},
        {"Name": "Cromwell European REIT", "Stock Code": "CWBU", "Property Sub-segment": "Diversified", "Market Cap (S$Mil)": 1144},
        {"Name": "Daiwa House Logistics Trust", "Stock Code": "DHLU", "Property Sub-segment": "Industrial", "Market Cap (S$Mil)": 397},
        {"Name": "Dasin Retail Trust", "Stock Code": "CEDU", "Property Sub-segment": "Retail", "Market Cap (S$Mil)": 19},
        {"Name": "Digital Core REIT", "Stock Code": "DCRU", "Property Sub-segment": "Specialized", "Market Cap (S$Mil)": 1008},
        {"Name": "EC World REIT", "Stock Code": "BWCU", "Property Sub-segment": "Industrial", "Market Cap (S$Mil)": 227},
        {"Name": "Elite Commercial REIT", "Stock Code": "MXNU", "Property Sub-segment": "Office", "Market Cap (S$Mil)": 241},
        {"Name": "ESR-LOGOS REIT", "Stock Code": "9A4U", "Property Sub-segment": "Industrial", "Market Cap (S$Mil)": 2075},
        {"Name": "Far East Hospitality Trust", "Stock Code": "Q5T", "Property Sub-segment": "Hospitality", "Market Cap (S$Mil)": 1247},
        {"Name": "First REIT", "Stock Code": "AW9U", "Property Sub-segment": "Health Care", "Market Cap (S$Mil)": 511},
        {"Name": "Frasers Centrepoint Trust", "Stock Code": "J69U", "Property Sub-segment": "Retail", "Market Cap (S$Mil)": 3855},
        {"Name": "Frasers Hospitality Trust", "Stock Code": "ACV", "Property Sub-segment": "Hospitality", "Market Cap (S$Mil)": 799},
        {"Name": "Frasers Logistics & Commercial Trust", "Stock Code": "BUOU", "Property Sub-segment": "Diversified", "Market Cap (S$Mil)": 3570},
        {"Name": "IREIT Global", "Stock Code": "UD1U", "Property Sub-segment": "Diversified", "Market Cap (S$Mil)": 377},
        {"Name": "Keppel DC REIT", "Stock Code": "AJBU", "Property Sub-segment": "Specialized", "Market Cap (S$Mil)": 3102},
        {"Name": "Keppel Pacific Oak US REIT", "Stock Code": "CMOU", "Property Sub-segment": "Office", "Market Cap (S$Mil)": 190},
        {"Name": "Keppel REIT", "Stock Code": "K71U", "Property Sub-segment": "Office", "Market Cap (S$Mil)": 3188},
        {"Name": "Lendlease Global Commercial REIT", "Stock Code": "JYEU", "Property Sub-segment": "Diversified", "Market Cap (S$Mil)": 1331},
        {"Name": "Lippo Malls Indonesia Retail Trust", "Stock Code": "D5IU", "Property Sub-segment": "Retail", "Market Cap (S$Mil)": 108},
        {"Name": "Manulife US REIT", "Stock Code": "BTOU", "Property Sub-segment": "Office", "Market Cap (S$Mil)": 154},
        {"Name": "Mapletree Pan Asia Commercial Trust", "Stock Code": "N2IU", "Property Sub-segment": "Diversified", "Market Cap (S$Mil)": 6414},
        {"Name": "Mapletree Industrial Trust", "Stock Code": "ME8U", "Property Sub-segment": "Industrial", "Market Cap (S$Mil)": 5983},
        {"Name": "Mapletree Logistics Trust", "Stock Code": "M44U", "Property Sub-segment": "Industrial", "Market Cap (S$Mil)": 6471},
        {"Name": "OUE REIT", "Stock Code": "TS0U", "Property Sub-segment": "Diversified", "Market Cap (S$Mil)": 1428},
        {"Name": "Paragon REIT", "Stock Code": "SK6U", "Property Sub-segment": "Retail", "Market Cap (S$Mil)": 2430},
        {"Name": "Parkway Life REIT", "Stock Code": "C2PU", "Property Sub-segment": "Health Care", "Market Cap (S$Mil)": 2118},
        {"Name": "Prime US REIT", "Stock Code": "OXMU", "Property Sub-segment": "Office", "Market Cap (S$Mil)": 208},
        {"Name": "Sabana Industrial REIT", "Stock Code": "M1GU", "Property Sub-segment": "Industrial", "Market Cap (S$Mil)": 371},
        {"Name": "Sasseur REIT", "Stock Code": "CRPU", "Property Sub-segment": "Retail", "Market Cap (S$Mil)": 841},
        {"Name": "Starhill Global REIT", "Stock Code": "P40U", "Property Sub-segment": "Retail", "Market Cap (S$Mil)": 1098},
        {"Name": "Suntec REIT", "Stock Code": "T82U", "Property Sub-segment": "Diversified", "Market Cap (S$Mil)": 3059},
        {"Name": "United Hampshire US REIT", "Stock Code": "ODBU", "Property Sub-segment": "Retail", "Market Cap (S$Mil)": 312},
    ]

    start = "2019-12-31"  # One day before 2020-01-01
    end = "2025-01-01"    # One day after 2024-12-31
    folder = "company_data"

    for item in data_extracted:
        stock_code = f"{item['Stock Code']}.SI"
        scrape_stock_history_to_csv(stock_code, start, end, folder)
        time.sleep(1) # Be respectful to the server

    print("Scraping of historical stock prices completed for all listed companies.")
